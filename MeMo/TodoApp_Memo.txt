
【Todoアプリ発表用メモ】




「やること（Todo）」を登録して、表示・削除・完了できるシンプルなアプリを作った
Spring Boot（Java）＋ PostgreSQL（データベース）＋ HTML/CSS/JavaScript（フロントエンド）で構成。

--------------------------------------------------------

処理の流れ（全体像）

1. ユーザーがブラウザでアクセス → HTML（index.html）が表示される
2. ユーザーが入力欄にタスクを書いて「追加ボタン」を押す
3. JavaScriptがサーバーにPOSTリクエスト（/api/todos）
4. サーバー側（Spring Boot）がリクエストを受け取り、DBに保存
5. DBからデータを読み出し、最新のTodoリストを画面に表示
6. チェックボックスや削除ボタンも同様に、AJAXでAPIを呼び出して更新

--------------------------------------------------------

ファイルごとの役割

(1)index.html（src/main/resources/templates/index.html）
- ユーザーが見る画面。Todoの一覧や入力欄、ボタンがある
- jQueryでAJAX通信を行い、サーバーのAPIを呼び出す

(2)Todo.java（src/main/java/.../entity/Todo.java）
- Todoという「やること」の形（タイトル、完了したかどうか）を表すクラス
- DBと対応（JPAでEntityと定義）

(3)TodoRepository.java（.../repository/TodoRepository.java）
- Todoを保存したり、削除したり、一覧を取得したりするためのクラス（DB操作）

(4)TodoController.java（.../controller/TodoController.java）
- ブラウザとJavaの橋渡し
- 「一覧取得」「新規追加」「削除」「完了フラグ切替」などのAPIを提供

(5)TodoAppApplication.java（アプリの起動クラス）
- Spring Bootアプリを起動するためのスタート地点

(6)application.properties（設定ファイル）
- DBとの接続設定や文字コード、ログ設定などを記載

ファイル構成

src/main/java/
└── com.example.todoapp/
    ├── controller/     ← リクエストを受け取る
    │   └── TodoController.java
    ├── entity/         ← データの型（ToDo）を定義
    │   └── Todo.java
    ├── repository/     ← データベースとのやりとり
    │   └── TodoRepository.java
    └── TodoAppApplication.java ← 起動ファイル

src/main/resources/
├── static/       ← JS/CSS など
├── templates/    ← HTML (Thymeleaf)
│   └── index.html
└── application.properties ← DB接続の設定など


--------------------------------------------------------

◆ まとめ
- Spring BootとThymeleafでWeb画面を作成
- jQueryでAPIと非同期通信して、ページを再読み込みせずに操作
- PostgreSQLに保存しているので、データが保持される





概要
シンプルなToDoリストアプリ
やることを入力して登録し、一覧で見て、終わったらチェックして、不要なら削除
Webブラウザ上で動いていて、データはデータベースに保存される


使ったもの
Java 21
Spring Boot 3.3　　　　（アプリのエンジン）
Thymeleaf　　　　　　　（HTMLのテンプレート）
PostgreSQL　
Bootstrap 5 / jQuery　　（見た目と操作を簡単にするやつ）

処理の流れ（ユーザーが使う操作
1. ToDoを登録するまでの流れ
ユーザーが画面の入力欄にタイトルを入れて「登録」ボタンを押す。
フロントエンド（HTML + jQuery）がJavaScriptのAJAXでデータを送信。
Spring Bootの TodoController が /add にリクエストを受け取る。
受け取ったデータを Todo というクラスに詰めて、JPAでデータベースに保存。
登録が終わったら、新しいToDo一覧を返す（JSON）。
JavaScriptが一覧を再表示する。

2. チェックボックスで完了を切り替える
チェックボックスをクリックすると、JavaScriptが「このToDoを更新して」とAJAXリクエスト。
Spring Bootの /update/{id} に届く。
該当の Todo をDBから取り出し、completed フラグを反転させて保存。
フロント側は画面を更新。

3. ToDoを削除
ゴミ箱アイコンを押すと、AJAXで /delete/{id} を呼び出す。
Spring側でDBから該当のToDoを削除。
フロントは一覧を再描画。



どんな流れか
サーバーには「ToDoの箱」がある
ユーザーが「やること」を入力すると、その箱に新しいメモを追加
終わったらチェックを入れて、やった通知？をする
いらないメモは捨て
サーバーと画面はお互いに最新の状態を確認しあう









画面が勝手に更新されるのは？	jQueryのAJAXで裏でデータのやりとりしてる
新しいToDoをどう保存する？	コントローラーで受け取って、リポジトリで保存





posgre起動
net start postgresql-x64-XX
実行
PS C:\Users\suzuk\Documents\TODO> mvn spring-boot:run


ポート設定について
src/main/resources/application.properties
properties
コピーする
編集する
# デフォルトは 8080
server.port=8080

# ルートの接頭辞を変更したい場合（例: /app/～で始まるように）
# server.servlet.context-path=/app
これを書かない場合、URLは http://localhost:8080/。

server.servlet.context-path=/app を設定すると、http://localhost:8080/app/ がルートになります。




ポートが違う	application.properties で server.port を変更している	設定されたポートでアクセスする（例：8081）










オブジェクト：直訳すれば「物」「対象」という意味。プログラミングにおいてはデータと処理の集まりを意味している。

オブジェクトと操作を分けて考える方法。
「クラス」「メソッド」「インスタンス」を用いて、コーディングを簡潔にまとめることができる。
「クラス」「メソッド」「インスタンス」の理解が必須。

クラス・・・データと処理を１つにまとめる機能。
インスタンス・・・クラスの中身の実働部分。インスタンスの中にはメソッドがある。
メソッド・・・関数と言われる場合もある。アクションを起こす命令の内容のようなもの。

クラスの中にインスタンスがあり、インスタンスの中にメソッドがあるようなイメージ。


JAVAのクラスは構造体みたいなもの？
1.クラスとは
1-1.クラスのイメージ
クラスとは、繰り返し出てくるモノの設計図をあらかじめ作っておき、一つひとつをいちいち定義せずとも扱えるようにするものです。
わかりやすいところで言うと、ゲームのキャラクター
（それぞれのキャラが攻撃力、防御力などの変数を持っている）などが例に挙げられることが多いです。
簡単なアプリを作っていたりすると、例えばメモ帳アプリだったらメモのタイトルと内容、
社員情報だったらその人の名前と社員番号など、繰り返し同じ形のものが出てくるので、
クラスを使います。（というかJavaやC++は基本すべてクラスを使ってプログラミングをします。）



エンティティ（entity）とは、実体、存在、実在(物)、本質、本体などの意味を持つ英単語。
 ITの分野では、何らかの標識や識別名、所在情報によって指し示される、独立した一意の対象物をエンティティということが多い。


 JpaRepository とは
Spring Data JPA が提供している「データベース操作の共通機能」をまとめたインターフェース。

JpaRepository<Todo, Long>
Todo：エンティティ（＝テーブルのようなもの）
Long：主キー（id）の型

これを継承することで：

メソッド	できること
findAll()	全件取得
findById(id)	ID指定で1件取得
save(entity)	保存（insert or update）
deleteById(id)	削除

などが 何も書かなくても使えるようになる

Spring Boot（Spring Data JPA）では、
**「JPAが勝手に中身を用意してくれる」**という仕組みがあり、
public interface TodoRepository extends JpaRepository<Todo, Long>
のようにインターフェースだけ作れば
Spring が実行時に、自動的に「データベース操作ができるクラス」を作ってくれます！



Bootstrapとは、レスポンシブデザインを基本とし、優れたデザインをスピーディーに実装するためのCSSフレームワークです。
BootstrapはCSSフレームワークですが、テキスト等の装飾以外にも使用されています。ここからは、
Bootstrapの持つCSSの枠を超えた特徴を紹介します。Bootstrapの主な特徴は以下の3点です。


・標準でレスポンシブデザインに対応

・豊富なテーマテンプレートが提供されている

・グリッドシステムを採用している



アノテーション（Annotation）は、「注釈」を意味する言葉であり、
ITの分野ではデータに対して追加の情報タグ（メタデータ）を付加する作業



データベースにおける「スキーマ」とは、いわば「設計図」のことです。
構築するにはデータを格納する構造やアルゴリズムが必要となります。
そこで必要となるのが、データの洗い出しや整理のルールを決めるための設計図です。
データを格納する場所を定義することにより、データを格納する基準を決められるようになります。
データ格納の基準が決まれば、データベースの使いやすさも向上するものです。
スキーマには次の3つの構造があります。

外部スキーマ
外部スキーマとは、データベースの構造をユーザーの視点から定義するものです。
実際に使用する人の立場に立って考えられたデータを格納する場所のことを指します。
求められるデータを検索した際に、表示されるビューは外部での設計図です。
SQLビューが外部での設計図であると考えればわかりやすいでしょう。

概念スキーマ
概念スキーマは、データベースで利用される論理データのことです。
外部での設計図が利用者の立場に立ったものであったのと反対に、概念上の設計図は開発者側の立場に立ったデータベースのことです。
主に格納されるデータの情報やデータ同士の関係性について定義するものです。
「データの関係性を定義するテーブル」と考えればわかりやすいのではないでしょうか。

内部スキーマ
概念上の設計図の論理データを格納する定義づけを行うのが内部スキーマです。
内部の設計図は定義されたデータを、実際にどのように格納するかを決定するスキーマのことを指します。
物理設計の段階で決定されるものです。


Java基礎まとめ(基礎構文)
https://qiita.com/sukeqiita/items/37155fc150cf9e942207